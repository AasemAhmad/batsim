image: oarteam/batsim_ci

variables:
  GIT_SUBMODULE_STRATEGY: none

###############################################################################
# Build stage
###############################################################################
build:
  stage: build
  script:
    - mkdir -p ${CI_PROJECT_DIR}/build
    - cd ${CI_PROJECT_DIR}/build
    - |
      nix-shell ${CI_PROJECT_DIR}/.ci-shell.nix \
                --command "cmake .. \
                                 -DCMAKE_BUILD_TYPE=Debug \
                                 -Denable_warnings=ON \
                                 -Dtreat_warnings_as_errors=OFF"

    - nix-shell ${CI_PROJECT_DIR}/.ci-shell.nix --command "make"
  artifacts:
    paths:
      - /builds/batsim/batsim/build

###############################################################################
# Test stage
###############################################################################
test_doc:
  stage: test
  script:
    - cd ${CI_PROJECT_DIR}/doc
    - nix-shell ${CI_PROJECT_DIR}/.ci-shell.nix --command "doxygen"
    - cat doxygen_warnings.log
    # The next line fails if doxygen generated warnings
    - eval "[ $(wc -c doxygen_warnings.log | cut -d ' ' -f1) -eq 0 ]"
  artifacts:
    paths:
      - /builds/batsim/batsim/doc/doxygen_doc/html

test_test:
  stage: test
  script:
    # Run the redis server
    - nix-shell .ci-shell.nix --command "redis-server>/dev/null &"
    - sleep 1

    # Finally run the tests
    - export PATH=${CI_PROJECT_DIR}/build:${PATH}
    - |
      nix-shell ${CI_PROJECT_DIR}/.ci-shell.nix \
                --command "ctest --output-on-failure"
  dependencies:
    - build

test_unittest:
  stage: test
  script:
    # Run unit tests
    - ${CI_PROJECT_DIR}/build/batsim --unittest
  dependencies:
    - build

###############################################################################
# Deploy stage
###############################################################################
deploy_code_doc:
  stage: deploy
  script:
      # The script below is done to push Batsim's code doc onto the gforge website.
      # Information found on https://docs.gitlab.com/ee/ci/ssh_keys/README.html

      # Install ssh-agent if not already installed, it is required by Docker.
      # (change apt-get to yum if you use a CentOS-based image)
      - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'

      # Run ssh-agent (inside the build environment)
      - eval $(ssh-agent -s)

      # Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
      - ssh-add <(echo "$SSH_PRIVATE_KEY")

      # For Docker builds disable host key checking. Be aware that by adding that
      # you are suspectible to man-in-the-middle attacks.
      # WARNING: Use this only with the Docker executor, if you use it with shell
      # you will overwrite your user's SSH config.
      - mkdir -p ~/.ssh
      - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" >> ~/.ssh/config'

      # Finally push the code documentation on the gforge website
      - cd /builds/batsim/batsim/doc
      - rsync -rlgoDz --delete doxygen_doc/html/ mpoquet@scm.gforge.inria.fr:/home/groups/batsim/htdocs
  dependencies:
    - test_doc
  only:
    - master

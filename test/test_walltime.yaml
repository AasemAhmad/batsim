# This script should be called from Batsim's root directory

# If needed, the working directory of this script can be specified within this file
#base_working_directory: ~/proj/batsim

# If needed, the output directory of this script can be specified within this file
#base_output_directory: ~/proj/batsim/results

implicit_instances:
  implicit:
    sweep:
      platform :
        - ["smallPF", "platforms/energy_platform_homogeneous_no_net_128.xml"]
      workload :
        - ["walltime", "workload_profiles/walltime_test.json"]
      pybatsim_algo:
        - fillerSched
    generic_instance:
      timeout: 10
      working_directory: ${base_working_directory}
      output_directory: ${base_output_directory}/results/${pybatsim_algo}_${workload[0]}
      batsim_command: batsim -p ${platform[1]} -w ${workload[1]} -E -e ${output_directory}/out -s ${output_directory}/socket -L
      sched_command: python2 schedulers/pybatsim/launcher.py ${pybatsim_algo} -s ${output_directory}/socket

      commands_after_execution:
        - |
            #!/bin/bash

            cat > ${output_directory}/jobs_analysis.py <<EOF
            #!/usr/bin/python3
            import pandas as pd
            import sys

            def check_ok_bool(row):
                if row['execution_time'] > row['requested_time']:
                    return false
                if row['success']:
                    return row['execution_time'] < row['requested_time']
                else:
                    return row['execution_time'] >= row['requested_time']

            def check_ok(row):
                return int(check_ok_bool(row))

            jobs = pd.read_csv('${output_directory}/out_jobs.csv')

            jobs['valid'] = jobs.apply(check_ok, axis=1)
            if jobs['valid'].sum() != len(jobs):
                print('Some jobs are invalid!')
                print(jobs[['jobID', 'requested_time', 'execution_time', 'success', 'valid']])
                sys.exit(1)
            else:
                print('All jobs are valid!')
                print(jobs[['jobID', 'requested_time', 'execution_time', 'success', 'valid']])
                sys.exit(0)

            EOF
        - python3 ${output_directory}/jobs_analysis.py
      # commands_before_execution:
      #   - ls .
      #   - |
      #     #!/usr/bin/python3
      #     print('Hello from python3!')
      #   - |
      #     #!/usr/bin/python2
      #     print 'Hello from python2!'

# This script should be called from Batsim's root directory

# If needed, the working directory of this script can be specified within this file
#base_working_directory: ~/proj/batsim

# If needed, the output directory of this script can be specified within this file
base_output_directory: /tmp/batsim_tests/walltime

base_variables:
  batsim_dir: ${base_working_directory}

implicit_instances:
  implicit:
    sweep:
      platform :
        - {"name":"homo128", "filename":"${batsim_dir}/platforms/energy_platform_homogeneous_no_net_128.xml"}
      workload :
        - {"name":"walltime", "filename":"${batsim_dir}/workload_profiles/walltime_test.json"}
      pybatsim_algo:
        - {"name":"filler", "algo_name":"fillerSched"}
    generic_instance:
      timeout: 10
      working_directory: ${base_working_directory}
      output_directory: ${base_output_directory}/results/${pybatsim_algo[name]}_${workload[name]}_${platform[name]}
      batsim_command: batsim -p ${platform[filename]} -w ${workload[filename]} -e ${output_directory}/out -s ${output_directory}/socket -L
      sched_command: python2 ${batsim_dir}/schedulers/pybatsim/launcher.py ${pybatsim_algo[algo_name]} -s ${output_directory}/socket

      commands_after_execution:
        - |
            #!/bin/bash

            cat > ${output_directory}/jobs_analysis.py <<EOF
            #!/usr/bin/python3
            import pandas as pd
            import sys

            def check_ok_bool(row):
                if row['execution_time'] > row['requested_time']:
                    return false
                if row['success']:
                    return row['execution_time'] < row['requested_time']
                else:
                    return row['execution_time'] >= row['requested_time']

            def check_ok(row):
                return int(check_ok_bool(row))

            jobs = pd.read_csv('${output_directory}/out_jobs.csv')

            jobs['valid'] = jobs.apply(check_ok, axis=1)
            if jobs['valid'].sum() != len(jobs):
                print('Some jobs are invalid!')
                print(jobs[['jobID', 'requested_time', 'execution_time', 'success', 'valid']])
                sys.exit(1)
            else:
                print('All jobs are valid!')
                print(jobs[['jobID', 'requested_time', 'execution_time', 'success', 'valid']])
                sys.exit(0)

            EOF
        - python3 ${output_directory}/jobs_analysis.py

commands_before_instances:
  - |
      #!/usr/bin/python3
      # Let's check that the base working directory looks like Batsim's
      import os
      import sys

      bwd = os.environ['base_working_directory']

      if os.path.isdir(bwd):
          dirs = [bwd + '/' + x for x in ['cmake', 'platforms', 'schedulers',
                                          'src', 'tools']]
          for dir in dirs:
              if not os.path.isdir(dir):
                  print('The base working directory seems to be bad: there is '
                        "no '{}' directory.", dir)
                  sys.exit(1)
          sys.exit(0)
      else:
          print("The base working directory does not exist!")
          sys.exit(2)

  - |
      #!/usr/bin/python2
      # Let's clean the output directory if needed
      import os
      import shutil
      import sys

      bod = os.environ['base_output_directory']

      if os.path.isdir(bod):
          dirs = [bod + '/' + x for x in ['instances', 'sweeper', 'results']]
          for dir in dirs:
              if os.path.isdir(dir):
                  shutil.rmtree(dir)

      sys.exit(0)
